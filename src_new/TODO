1. dweller.get - строго асинхронный. Возвращает await на каждом шагу.
Разрешается использовать его синхронно, когда нам не нужны динамические двеллеры

2. У трейтов может быть подмассив traits в собственном конфиге. В таком случае нужно как-то загрузить все трейты-зависимости.
Каждый раз загружая трейт мы загружаем все требуемые для него трейты.

Храним на классе список добаленных трейтов.



Список трейтов:


- Persistent
	Требует Model.
Возможно, стоит смержить с model и сделать параметром. Такой объект кладется в dwellers по своему айдишнику.

- Model. 
Этот объект умеет сохраняться и загружаться. У него есть схема. Его состояние можно


Сторадж.
Этот двеллер переопределяет resolveChild. 
Такой двеллер умеет адресовать объекты по какому-нибудь uuid.
Он умеет создавать двеллеров.
Обязаны ли они быть Model? Кажется, что да.






Дерево

content.
	.templateName: просто темплейты





Проблемы и вопросы:




Когда создаем модель?

Когда просто загетили ее и надо загрузить из базы.


Когда в storage нажали getAll

В этом случае полетел запрос вcегда в базу.

мы не кэшируем двеллеры, созданные таким образом.



1) Добавляем тип данных array
2) Добавляем тип данных enum (нужно ли регистрировать тип данных)
3) Добавляем парсер типов данных
4) Тесты?

Есть сторителлер.

Он умеет вбрасывать рекорд в рекорды.

У рекорда есть

turn:
stories: [ link stories ]
content: string textArea
type: link recordTypes
characterId: link characters




Есть chats

В них есть messages

У чата есть reason



Есть персонаж.

У него есть один огромный чат. 
В этом чате есть сообщения от системы, юзера и тд.

Каждый раз, когда юзер что-то говорит, сообщение уходит в чат.
Также это сообщение оседает в records как question.

Каждый раз, когда персонаж что-то отвечает, сообщение уходит в чат.
Также это сообщение оседает в records как answer.





Функции персонажа:







У персонажа есть characterType в котором указаны статичные настройки.

Intro.
Из своих полей у него есть имя, биография.

Еще у персонажа есть действия. 

Приказ короля.
Если в результате диалога игро


Есть действие "Я сделал".
Есть действие "Указ короля".



Каждый вопрос, заданный персонажу.


У персонажа есть проперти:



Персонаж может сказать own_action.
perform_own_action Действие которое делаешь лично ты.


perform_user_action Действие которое делает игрок



set_react_time Уровень важности событий, на которые мы реагируем


set_announce_time Уровень важности событий, про которые нужно оповещать игрока.





loremaster

--- Конфлюкс